name: Create or Update Release ZIP

on:
  workflow_dispatch:  # Trigger the action manually

jobs:
  create_or_update_release_zip:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install GitHub CLI
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      # Step 3: Extract package version from manifest.json
      - name: Extract package version
        id: get_version
        run: |
          PACKAGE_VERSION=$(jq -r '.package_version' manifest.json)
          PACKAGE_VERSION_UNDERSCORED=${PACKAGE_VERSION//./_}
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "PACKAGE_VERSION_UNDERSCORED=$PACKAGE_VERSION_UNDERSCORED" >> $GITHUB_ENV

      # Step 4: Check if release exists and is draft (fail if release exists and is not a draft)
      - name: Check if release exists and is draft
        id: check_release
        run: |
          TAG_NAME="v${{ env.PACKAGE_VERSION }}"
          
          # Check if the release exists using GitHub CLI
          gh release view $TAG_NAME --json draft --jq .draft 2> /dev/null || echo "not_found" > release_status.txt
          
          if [ -f release_status.txt ]; then
            echo "release_not_found=true" >> $GITHUB_ENV
          else
            echo "release_not_found=false" >> $GITHUB_ENV
            DRAFT_STATUS=$(gh release view $TAG_NAME --json draft --jq .draft)
          
            if [ "$DRAFT_STATUS" = "false" ]; then
              echo "Release with tag $TAG_NAME already exists and is not a draft. Failing the workflow."
              exit 1  # Fail the workflow if the release exists but is not a draft
            fi
          fi


      # Step 5: Remove unnecessary files and directories
      - name: Clean up unnecessary files
        run: |
          rm -rf gen
          rm -rf .github
          rm -rf .git
          rm .gitignore
          find . -name "*.xcf" -type f -delete  # Remove all .xcf files

      # Step 6: Create the ZIP file
      - name: Create release zip
        run: |
          ZIP_NAME="evermizer-tracker-package-v${{ env.PACKAGE_VERSION_UNDERSCORED }}.zip"
          zip -r $ZIP_NAME ./*

      # Step 7: Create a new draft release if no release exists
      - name: Create a draft release
        if: env.release_not_found == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}  # Tag name is the version prefixed with 'v'
          release_name: v${{ env.PACKAGE_VERSION }}  # Release name is also prefixed with 'v'
          draft: true  # Create a draft release
          prerelease: false  # Set to true if it's a pre-release

      # Step 8: Upload the ZIP file to the release
      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: evermizer-tracker-package-v${{ env.PACKAGE_VERSION_UNDERSCORED }}.zip
          asset_name: evermizer-tracker-package-v${{ env.PACKAGE_VERSION_UNDERSCORED }}.zip
          asset_content_type: application/zip
